name: VAgent CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 9 AM UTC to monitor production
    - cron: '0 9 * * *'

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Run backend tests (if any)
      run: |
        cd backend
        npm test --if-present
        
  # Deploy to Render (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Trigger Render deployment
      run: |
        if [ ! -z "${{ secrets.RENDER_DEPLOY_HOOK }}" ]; then
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
          echo "Deployment triggered"
        else
          echo "No deploy hook configured"
        fi
        
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 300  # Wait 5 minutes for deployment
        
  # Run Selenium tests after deployment
  selenium-tests:
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy]
    if: always() && (needs.build-and-test.result == 'success')
    
    strategy:
      matrix:
        browser: [chrome]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Install Chrome
      uses: browser-actions/setup-chrome@v1
      
    - name: Verify application is accessible
      run: |
        echo "Checking if application is accessible..."
        for i in {1..10}; do
          if curl -s -f "${{ secrets.BASE_URL || 'https://localhost:3000' }}" > /dev/null; then
            echo "Application is accessible"
            break
          else
            echo "Attempt $i: Application not accessible, waiting..."
            sleep 30
          fi
          if [ $i -eq 10 ]; then
            echo "Application is not accessible after 10 attempts"
            exit 1
          fi
        done
        
    - name: Run Selenium tests
      run: |
        cd selenium-tests
        mvn clean test \
          -Dbrowser=${{ matrix.browser }} \
          -DbaseUrl="${{ secrets.BASE_URL || 'https://localhost:3000' }}" \
          -Dheadless=true
      env:
        BASE_URL: ${{ secrets.BASE_URL }}
        TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
        TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
        
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: selenium-test-reports-${{ matrix.browser }}
        path: |
          selenium-tests/target/surefire-reports/
          selenium-tests/test-output/
          selenium-tests/screenshots/
        retention-days: 30
        
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Selenium Test Results (${{ matrix.browser }})
        path: selenium-tests/target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false
        
  # Notify on failure
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-test, selenium-tests]
    if: always() && (needs.build-and-test.result == 'failure' || needs.selenium-tests.result == 'failure')
    
    steps:
    - name: Notify failure
      run: |
        echo "Tests failed! Check the logs for details."
        # Add notification logic here (Slack, email, etc.)
